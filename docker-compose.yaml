services:
  hazelcast1:
    image: hazelcast/hazelcast:latest
    ports:
      - "5701:5701"
    volumes:
      - ./src/main/resources:/home/hazelcast/data
    environment:
      - HZ_NETWORK_JOIN_TCP_IP_ENABLED=true
      - HZ_NETWORK_JOIN_TCP_IP_MEMBERS=hazelcast1,hazelcast2

  hazelcast2:
    image: hazelcast/hazelcast:latest
    volumes:
      - ./src/main/resources:/home/hazelcast/data
    environment:
      - HZ_NETWORK_JOIN_TCP_IP_ENABLED=true
      - HZ_NETWORK_JOIN_TCP_IP_MEMBERS=hazelcast1,hazelcast2

  management-center:
    image: hazelcast/management-center:latest
    ports:
    - "8080:8080"
    environment:
    - MC_DEFAULT_CLUSTER=dev
    - MC_DEFAULT_CLUSTER_MEMBERS=hazelcast1,hazelcast2

  zoo1:
    image: confluentinc/cp-zookeeper:7.8.0
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9001
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1

  superset:
    build:
      context: .
      dockerfile: Dockerfile.superset
    container_name: superset
    ports:
      - "8088:8088"
    environment:
      - SUPERSET_SECRET_KEY=supersecret
      - FLASK_ENV=development     # switches Flask into dev mode
      - FLASK_DEBUG=1             # enable debugger & live reload
    volumes:
      # Mount your local ./superset_home into the container
      - ./superset_home:/app/superset_home
    command: >
      /bin/bash -c "
        superset db upgrade &&
        superset init &&
        superset run -h 0.0.0.0 -p 8088"

  restq:
    build:
      context: .
      dockerfile: Dockerfile.restq
    image: hazelcast-restq:latest
    container_name: restq
    depends_on:
      - hazelcast1
      - hazelcast2
    environment:
      # Point the Python client at your cluster
      HZ_CLUSTER_MEMBERS: hazelcast1:5701,hazelcast2:5701

      # Optional robust client timeouts & heartbeats (ms)
      HZ_CONNECTION_TIMEOUT: 10000
      HZ_CONNECTION_ATTEMPT_LIMIT: 3
      HZ_CONNECTION_ATTEMPT_PERIOD: 3000
      HZ_HEARTBEAT_INTERVAL: 5000
      HZ_HEARTBEAT_TIMEOUT: 20000
      HZ_INVOCATION_TIMEOUT: 60000

      # REST behaviour (read-only already enforced in your code)
      DEFAULT_TIMEOUT: 30
      DEFAULT_CURSOR_BUFFER: 2048
      STREAM_CHUNK_ROWS: 4096
      RATE_LIMIT_RPS: 50
      RATE_LIMIT_BURST: 100

      # If you prefer URL instead of HZ_* vars:
      # DB_URL: hazelcast+python://hazelcast1:5701

      # Uvicorn workers (overridable)
      UVICORN_WORKERS: 2
    ports:
      - "8000:8000"
    restart: unless-stopped

  temperatures_producer:
    profiles: ["producer"]
    build:
      context: .
      dockerfile: Dockerfile.demo
    image: demo-sql-service-java
    depends_on:
      - kafka1
      - hazelcast1
    command:
      - "com.hazelcast.fcannizzohz.TemperatureProducerCmd" # Class to run the main() of
      - "--bootstrap"
      - "kafka1:19092" # pass the kafka endpoint (see listeners port in the kafka container
      - "--cluster"
      - "dev" # pass the hz clusterName
      - "--member"
      - "hazelcast1:5701" # pass the hz member address
      - "--seed" # generates automatically seed data and mappings

networks:
  default:
    name: hazelcast-net